steps:
- pwsh: |
        $url = "https://azuresearch-usnc.nuget.org/query?q=MicaWPF&prerelease=false"
        $packageInfo = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}
        Write-Host "Pipeline = $($packageInfo | ConvertTo-Json -Depth 100)"
        $versionList;
        foreach ($versionlocal in $packageInfo.data.versions)
        {
              $versionList += [version[]]$versionlocal.version
        }
        $sortedVersions = $versionList | Sort-Object -Descending | foreach {$_.ToString()}
        $version = $sortedVersions[0]
        Write-Host $version
        $productVersionBeta = “$version.$(Build.BuildId)-Beta”
        Write-Host "##vso[task.setvariable variable=packageVersion]$productVersionBeta"
        Write-Host $productVersionBeta
  displayName: "Computing alpha version"
  condition: eq(variables['buildTag'], False)

- pwsh: |
        $tags = git tag --sort=-creatordate
        [string] $tag = $tags[0]
        Write-Host "##vso[task.setvariable variable=packageVersion]$tag"
        Write-Host $tag
  displayName: "Computing release version"
  condition: eq(variables['buildTag'], True)

- task: NuGetToolInstaller@1
  displayName: 'Installing Nuget 6.x'
  inputs:
    versionSpec: '6.x'

- pwsh: |
        Write-Host Downloading .Net Framework 4.8.1
        Start-BitsTransfer -Source 'https://go.microsoft.com/fwlink/?linkid=2203306' -Destination "C:\Net4.8.1.exe"
        Write-Host Installing .Net Framework 4.8.1
        Start-Process "C:\Net4.8.1.exe" -ArgumentList "/q", "/norestart", "/install" -wait
        Write-Host Installed .Net Framework 4.8.1
  displayName: "Use .Net Framework 4.8.1"

- task: UseDotNet@2
  displayName: 'Use .Net Core 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    includePreviewVersions: false

- task: UseDotNet@2
  displayName: 'Use .Net 6.0.x'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    includePreviewVersions: false

- task: UseDotNet@2
  displayName: 'Use .Net 7.0.x'
  inputs:
    packageType: 'sdk'
    version: '7.0.x'
    includePreviewVersions: false

- task: UseDotNet@2
  displayName: 'Use .Net 8.0.x'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    includePreviewVersions: false

- task: UseDotNet@2
  displayName: 'Use .Net 9.0.x'
  inputs:
    packageType: 'sdk'
    version: '9.0.x'
    includePreviewVersions: false

- task: DotNetCoreCLI@2
  displayName: .Net Restore
  inputs:
    command: 'restore'
    projects: '**\*!(Demo).csproj'

- task: DotNetCoreCLI@2
  displayName: .Net Build
  inputs:
    command: 'build'
    configuration: Release
    projects: '**\*!(Demo).csproj'
    arguments: --no-restore -c release -p:FileVersionRevision=$(packageVersion) -p:ContinuousIntegrationBuild=true
    versioningScheme: byEnvVar
    versionEnvVar: '$(packageVersion)'